// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Clipboard": Application Controllers
//
// Command:
// $ goagen
// --design=sebs.software\Malangelus\Clipboard\design
// --out=$(GOPATH)\src\sebs.software\Malangelus\Clipboard
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ActionsController is the controller interface for the Actions actions.
type ActionsController interface {
	goa.Muxer
	Retrieve(*RetrieveActionsContext) error
	Store(*StoreActionsContext) error
}

// MountActionsController "mounts" a Actions resource controller on the given service.
func MountActionsController(service *goa.Service, ctrl ActionsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRetrieveActionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Retrieve(rctx)
	}
	service.Mux.Handle("GET", "/retrieve/:guid", ctrl.MuxHandler("retrieve", h, nil))
	service.LogInfo("mount", "ctrl", "Actions", "action", "Retrieve", "route", "GET /retrieve/:guid")
	service.Mux.Handle("POST", "/retrieve", ctrl.MuxHandler("retrieve", h, nil))
	service.LogInfo("mount", "ctrl", "Actions", "action", "Retrieve", "route", "POST /retrieve")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStoreActionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Store(rctx)
	}
	service.Mux.Handle("GET", "/store/:value", ctrl.MuxHandler("store", h, nil))
	service.LogInfo("mount", "ctrl", "Actions", "action", "Store", "route", "GET /store/:value")
	service.Mux.Handle("POST", "/store", ctrl.MuxHandler("store", h, nil))
	service.LogInfo("mount", "ctrl", "Actions", "action", "Store", "route", "POST /store")
}
