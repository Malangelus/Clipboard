// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Clipboard": Application Contexts
//
// Command:
// $ goagen
// --design=sebs.software\Malangelus\Clipboard\design
// --out=$(GOPATH)\src\sebs.software\Malangelus\Clipboard
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/satori/go.uuid"
	"net/http"
)

// RetrieveActionsContext provides the actions retrieve action context.
type RetrieveActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	GUID uuid.UUID
}

// NewRetrieveActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller retrieve action.
func NewRetrieveActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*RetrieveActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RetrieveActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramGUID := req.Params["guid"]
	if len(paramGUID) > 0 {
		rawGUID := paramGUID[0]
		if guid, err2 := uuid.FromString(rawGUID); err2 == nil {
			rctx.GUID = guid
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("guid", rawGUID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RetrieveActionsContext) OK(r *ClipboardRetrieve) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.clipboard.retrieve")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// StoreActionsContext provides the actions store action context.
type StoreActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Value string
}

// NewStoreActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller store action.
func NewStoreActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*StoreActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StoreActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramValue := req.Params["value"]
	if len(paramValue) > 0 {
		rawValue := paramValue[0]
		rctx.Value = rawValue
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StoreActionsContext) OK(r *ClipboardStore) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.clipboard.store")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
